layer {
  name: "data"
  type: "Python"
  top: "input_sentence"
  top: "target_sentence"
  top: "cont_sentence"
  top: "data"
  python_param {
    module: "python_data_layers"
    layer: "pairedCaptionData"
    param_str: "{'caption_json': 'annotations/captions_no_caption_rm_eightCluster_train2014.json', 'feature_file': 'lexical_features/vgg_feats.attributes_JJ100_NN300_VB100_coco_471_eightCluster_0223_iter_80000.caffemodel.train.h5', 'vocabulary': 'utils/vocabulary/vocabulary.txt', 'batch_size': 100, 'stream_size': 20, 'top_names': ['input_sentence', 'target_sentence', 'cont_sentence', 'data']}"
  }
}
layer {
  name: "embedding"
  type: "Embed"
  bottom: "input_sentence"
  top: "embedded_input_sentence_1"
  param {
    lr_mult: 1
  }
  embed_param {
    bias_term: false
    input_dim: 8801 
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "embedding2"
  type: "InnerProduct"
  bottom: "embedded_input_sentence_1"
  top: "embedded_input_sentence"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 2
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_sentence"
  bottom: "cont_sentence"
  top: "lstm1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "reshape-fc8"
  type: "Reshape"
  bottom: "features"
  top: "reshape-fc8"
  reshape_param{
    shape{
      dim: 1
      dim: 100
      dim: -1
    }
  }
}
layer {
  name: "tile-fc8"
  type: "Tile"
  tile_param{
    axis: 0
    tiles: 20
  }
  bottom: "reshape-fc8"
  top: "tile-fc8"
}
layer {
  name: "concat-lm"
  type: "Concat"
  concat_param{
    axis: 2
  }
  bottom: "embedded_input_sentence"
  bottom: "lstm1"
  top: "concat_lm"
}
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "concat_lm"
  top: "predict-lm"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 2
  }
  inner_product_param {
    num_output: 8801
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "predict-im"
  type: "InnerProduct"
  bottom: "tile-fc8"
  top: "predict-im"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    bias_term: false
    num_output: 8801
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "add-predictions"
  type: "Eltwise"
  bottom: "predict-lm"
  bottom: "predict-im"
  top: "predict-multimodal"
  eltwise_param {
   operation: SUM
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict-multimodal"
  bottom: "target_sentence"
  top: "cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "predict-multimodal"
  bottom: "target_sentence"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    ignore_label: -1
  }
}
